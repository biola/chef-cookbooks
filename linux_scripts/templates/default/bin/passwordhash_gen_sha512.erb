#!/usr/bin/env python
#
# Cookbook Name:: rhn
# Recipe:: default
#
# Copyright 2013, Biola University 
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


def displayIntro():
  from os import system
  system('clear')
  print '-- Password Hash Generator --'
  print ''
  print 'This utility will, given the password you input, provide you with a securely hashed password for use in Unix/Linux systems.'
  print ''
  print 'Note: Passwords must be at least 8 characters in length, and must match at least 3 of the following character types:'
  print '1) Lowercase letters'
  print '2) Uppercase letters'
  print '3) Numbers'
  print '4) Special characters (e.g., #,$,*)'
  print ''

def genSalt():
  from os import urandom
  return ''.join(map(lambda x:'./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'[ord(x)%64], urandom(16)))

def checkPass(inputPass):
  # Returns True if the password meets the requirements
  #
  # First, needs to be at least 8 characters
  if len(inputPass) < 8:
    return False
  # Now, check for at least 3 of the other options
  matchedChecks = 0
  # Case 1) Lowercase
  lowercaseLetters = 0
  for c in inputPass:
    if c.islower():
         lowercaseLetters = lowercaseLetters + 1
  if lowercaseLetters > 0:
    matchedChecks = matchedChecks + 1
  # Case 2) Uppercase
  uppercaseLetters = 0
  for c in inputPass:
    if c.isupper():
         uppercaseLetters = uppercaseLetters + 1
  if uppercaseLetters > 0:
    matchedChecks = matchedChecks + 1
  # Case 3) Digits
  digitCount = 0
  for c in inputPass:
    if c.isdigit():
         digitCount = digitCount + 1
  if digitCount > 0:
    matchedChecks = matchedChecks + 1
  # Case 4) Special characters
  specialCharCount = 0
  for c in inputPass:
    if ((not c.isdigit()) and (not c.isupper()) and (not c.islower())):
         specialCharCount = specialCharCount + 1
  if specialCharCount > 0:
    matchedChecks = matchedChecks + 1
  # Moment of truth; only return true for 3 or more matches
  if matchedChecks > 2:
    return True
  else:
    return False

def getSecurePass():
  from sys import exit
  from getpass import getpass
  passMissing = True
  while passMissing:
    inputPass = getpass('Please enter your desired password: ')
    if inputPass == '':
      print ''
      print 'Blank password entered; exiting...'
      exit(0)
    # Check the password for validity
    passMissing = not checkPass(inputPass)
    if passMissing:
      print ''
      print 'Your password did not meet the complexity requirements detailed above.'
      print 'Re-enter your password, or enter a blank password to exit.'
      print ''
  return inputPass


if __name__ == "__main__":
  
  from getpass import getpass
  from os import system
  from crypt import crypt
  
  # Get the user's desired password
  displayIntro()
  finalPassMissing = True
  while finalPassMissing:
    inputPass = getSecurePass()
    repeatPass = getpass('Please verify (re-enter) your desired password: ')
    if (not (inputPass == repeatPass)):
      print 'Passwords do not match...'
      print ''
    else:
      finalPassMissing = False
  
  # Generate the salt
  salt = genSalt()

  # Generate the hashed password
  hashedPass = crypt(inputPass, '$6$%s$' % salt)
  system('clear')
  print 'The following is your hashed password:'
  print ''
  print hashedPass
  # Using raw_input for a crude, but secure (entries are not evaluated) pause
  print ''
  print 'Press Enter to exit...'
  enterPrompt = raw_input()
