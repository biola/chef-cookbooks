#!/usr/bin/env ruby
#
# Copyright 2013, Biola University 
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


def exitBadArguments()
  puts ''
  puts 'Usage: purge_older_than HOURS DIRECTORY'
  puts ''
  puts 'e.g., ./purge_older_than 8 "/home/Downloads/cats"'
  puts 'This will elminate all directories/files under cats older than 8 hours'
  puts '(not including the cats directory itself)'
  puts ''
  abort()
end

unless ARGV.length == 2
  exitBadArguments()
end

unless File.directory?(ARGV[1])
  exitBadArguments()
end

def checkFileOrDirectory(objForChecking, cutoffTime)
  # First, let's see if this file or directory matches our new scope
  throw :objIsNew if File.ctime(objForChecking) > cutoffTime
  # Since it doesn't; check it is a directory and start the process again
  if File.directory?(objForChecking)
    objForCheckingsChildren = Dir.entries(objForChecking) - ['.','..']
    objForCheckingsChildren.each do |objForCheckingsChild|
      checkFileOrDirectory(objForChecking + '/' + objForCheckingsChild, cutoffTime)
    end
  end
end

# Will populate this with directories to toss
directoriesToDelete = []

# Setup the object defining the oldest allowed file. Each hour has 3600 seconds.
inputCutoffTime = Time.at(Time.now() - (ARGV[0].to_i * 3600))

# Strip trailing slashes
baseDirectory = ARGV[1].sub(/\/$/,'')

# Strip the current and previous directory from its list of entries
topLevelObjs = Dir.entries(baseDirectory) - ['.','..']

# Start checking
topLevelObjs.each do |topLevelDirorFile|
  catch (:objIsNew) do
    checkFileOrDirectory(baseDirectory + '/' + topLevelDirorFile, inputCutoffTime)
    directoriesToDelete << baseDirectory + '/' + topLevelDirorFile
  end
end

# Now the at the list has been created, perform the deletions
require 'syslog'
require 'fileutils'
sysLogObj = Syslog.open('purge_older_than')
unless directoriesToDelete == []
  directoriesToDelete.each do |terminatedDir|
    sysLogObj.info("Deleting directory: #{terminatedDir}")
    FileUtils.rm_rf(terminatedDir)
  end
else
  sysLogObj.info("No directories found to delete")
end
sysLogObj.close()
