#!/usr/bin/env ruby

require 'time'

# Exception messages
$exceptions = ['Probable hostname lookup failure','Connection timed out','SSH key validation failed','Unknown exception occured']

# Setup logging
$outputtoconsole = false
def log(message)
  require 'syslog'
  # $0 is the current script name
  Syslog.open($0, Syslog::LOG_PID | Syslog::LOG_CONS) { |s| s.info message }
  if $outputtoconsole
    puts message
  end
end

# Execute SSH
def openssh(hostname,user,keys,command)
  require 'net/ssh'
  result = ""
  begin
    Net::SSH.start(hostname, user, :keys => keys) do |ssh|
      result = ssh.exec!(command)
    end
  rescue Errno::ENOENT
    result = $exceptions[0]
  rescue Errno::ETIMEDOUT 
    result = $exceptions[1]
  rescue Net::SSH::HostKeyMismatch 
    result = $exceptions[2]
  rescue
    result = $exceptions[3]
  end
  return result
end

def recentsnapshotexists?(sanhostname,sanusername,sanuserkey,sanvolume,snapshotidentifier,minsnapshotgap=3300)
  result = openssh(sanhostname,sanusername,sanuserkey,"snapcoll --list --volcoll #{sanvolume} | grep -i #{sanvolume}-#{snapshotidentifier}")
  unless $exceptions.include?(result) 
    # Isolate just the snapshot times
    snapshottimes = result.scan(/\d\d\d\d-\d\d-\d\d::\d\d:\d\d:\d\d\.\d\d\d/)
    
    # Check all the snapshots and see if they've occured since the minimumtime seconds in the past
    t = Time.now
    recentsnapshot = false
    snapshottimes.each do |snapshottime|
      recentsnapshot = true if Time.parse(snapshottime) > (t - minsnapshotgap.to_i)
    end
    return recentsnapshot
    
  else
    log('Snapshot check failure - exception is: ' + result)
    exit
  end
end

def getoraclebase(dbhostname,dbuser,dbkey,profile='/home/oracle/.bashrc')
  profilecontents = openssh(dbhostname,dbuser,dbkey,"sudo -u oracle -i /bin/cat #{profile}")
  result = ''
  unless $exceptions.include?(result)
    profilecontents.split(/\r?\n/).each do |line|
      if line.start_with?('export ORACLE_BASE')
        result = line.split('=')[1]
      end
    end
    unless result == ''
      return result
    else
      log("FATAL - ORACLE_BASE not found in #{profile}")
      exit
    end
  else
    log('Retrieving ORACLE_BASE failed - exception is: ' + result)
    exit
  end
end

def runningdbs(dbhostname,dbuser,dbkey)
  # Gather a list of the autostarted databases
  oratabresult = openssh(dbhostname,dbuser,dbkey,'cat /etc/oratab')
  databases = []
  oratabresult.split(/\r?\n/).each do |line|
    unless line.start_with?('#')
      if line.end_with?('Y')
        databases << line.split(':').first
      end
    end
  end
  log("Found autostarted databases #{databases.to_s}; checking each to see if they are running")
  databases.each do |database|
    dbprocess = openssh(dbhostname,dbuser,dbkey,"ps -efa | grep ora_lgwr_#{database} | grep -v 'grep ' | awk '{print $NF}'")
    unless dbprocess.chomp == "ora_lgwr_#{database}"
      log("Database #{database} does not appear to be running; ignoring its log check")
      databases.delete(database)
    end
  end
  log("Databases #{databases.to_s} appear to be autostarted and running")
  return databases
end

def backupmodelogged?(dbhostname,dbuser,dbkey,timeobj,oraclebase,databases)
  # Now, to perform the checks. The logic is a little strange here since we're looking for the following three lines:
  #
  # Wed Apr 30 12:01:02 1984
  # alter database begin backup
  # Completed: alter database begin backup
  #
  failedchecks = false
  databases.each do |database|
    unless failedchecks
      checksperformed = 0
      pendingcheck = true
      while (checksperformed < 5) and pendingcheck
        log("Starting check #{(checksperformed + 1).to_s} of diag log for database #{database}")
        logresult = openssh(dbhostname,dbuser,dbkey,"sudo -u oracle tail -n 500 #{oraclebase}/diag/rdbms/#{database.downcase}/#{database}/trace/alert_#{database}.log")
        lineofstanza = 0
        logresult.split(/\r?\n/).each do |line|
          if lineofstanza == 0
            if line =~ /^Sun|^Mon|^Tue|^Wed|^Thu|^Fri|^Sat/
              if Time.parse(line) >= timeobj
                lineofstanza = 2
              end
            end
          elsif lineofstanza == 2
            lineofstanza = 3
          elsif lineofstanza == 3
            if (line.chomp == 'Completed: alter database begin backup') or (line.chomp == 'ORA-1146 signalled during: alter database begin backup...')
              log("Successfully found the logged completion of the alter of database #{database}")
              pendingcheck = false
              break
            elsif line =~ /^Sun|^Mon|^Tue|^Wed|^Thu|^Fri|^Sat/
              lineofstanza == 2
            else
              lineofstanza = 0
            end
          end
        end
        if (checksperformed < 5) and pendingcheck
          log("No success stanza was found logged for database #{database} on attempt #{(checksperformed + 1).to_s}; sleeping for 5 seconds and retrying")
          sleep 5
          checksperformed += 1
        end
      end
      if pendingcheck
        failedchecks = true
      end
    end
    # Additional indent ends here
  end
  if failedchecks
    return false
  else
    return true
  end
end

def backupmodetoggle(dbhostname,dbuser,dbkey,enableordisable,databases)
  # connect to db server and place its databases in backup mode
  databases.each do |database|
    result = openssh(dbhostname,dbuser,dbkey,"sudo -u oracle -i env ORACLE_SID=#{database} /usr/local/bin/oracle_backup_mode_#{enableordisable}.sh")
    unless $exceptions.include?(result)
      unless result =~ /file\ \d\ is\ already\ in\ backup/i
        log("Oracle backup mode #{enableordisable}d for database #{database}")
      else
        log("Warning - #{database} appears to already be in backup mode")
      end
    else
      log('Connection to host to toggle backup mode failed - exception is: ' + result)
      if enableordisable == 'enable'
        exit
      else
        log('Warning - failed to disable backup mode - exception is: ' + result)
        exit
      end
    end
  end
  return 'success'
end

def takesnapshot(sanhostname,sanuser,sankeys,sanvolume,snapshotidentifier)
  # take the storage level snapshot
  sansnapshot = "#{sanvolume}-#{snapshotidentifier}-#{Time.now.strftime("%F::%T.%L")}"
  log("Creating Nimble snapshot #{sansnapshot}")
  result = openssh(sanhostname,sanuser,sankeys,"volcoll --snap #{sanvolume} --snapcoll_name #{sansnapshot}")
  if $exceptions.include?(result) 
    log("Failed to create the storage snapshot - logged exception is: #{result}")
  end
  return result
end

def removeoldestbackup(sanhostname,sanusername,sanuserkey,sanvolume,snapshotidentifier,snapshotstoretain,minimumsnapshotage=604740)
  result = openssh(sanhostname,sanusername,sanuserkey,"snapcoll --list --volcoll #{sanvolume} | grep -i #{sanvolume}")
  unless $exceptions.include?(result) 
    # Isolate just the snapshot times
    snapshots = result.scan(/#{sanvolume}-#{snapshotidentifier}-\d\d\d\d-\d\d-\d\d::\d\d:\d\d:\d\d\.\d\d\d/)
    #snapshots.sort!
    t = Time.now
    snapshots.sort.each do |snapshot|
      if snapshots.length > snapshotstoretain
        if Time.parse(snapshot.scan(/\d\d\d\d-\d\d-\d\d::\d\d:\d\d:\d\d\.\d\d\d/)[0]) < (t - minimumsnapshotage)
          log("Deleting Nimble snapshot #{snapshot}")
          openssh(sanhostname,sanusername,sanuserkey,"snapcoll --delete #{snapshot} --volcoll #{sanvolume}")
          # Remove from the generated array
          snapshots.delete(snapshot)
        end
      end
    end
  else
    log('Snapshot check failure - exception is: ' + result)
    exit
  end
end


if __FILE__ == $0
    require 'optparse'
    options = {}
    optparse = OptionParser.new do|opts|
      # Set a banner, displayed at the top
      # of the help screen.
      opts.banner = "Usage: oracle_nimble_backup.rb [options]"
      
      options[:sanhostname] = nil
      opts.on( '-S', '--sanhostname FQDN', 'Connect to Nimble at FQDN' ) do |parsopt|
        options[:sanhostname] = parsopt
      end
      options[:sanusername] = 'admin'
      opts.on( '-s', '--sanusername USERNAME', 'Connect to Nimble as USERNAME; defaults to admin' ) do |parsopt|
        options[:sanusername] = parsopt
      end
      options[:sanuserkey] = nil
      opts.on( '-u', '--sanuserkey FILE', 'SSH keyfile for connecting to Nimble' ) do |parsopt|
        options[:sanuserkey] = parsopt
      end
      options[:sanvolume] = nil
      opts.on( '-v', '--sanvolume VOLUME', 'Work with volume collection VOLUME' ) do |parsopt|
        options[:sanvolume] = parsopt
      end
      options[:snapshotidentifier] = 'oracleawarebackup'
      opts.on( '-w', '--snapshotidentifier NAME', 'Group snapshots by NAME; defaults to \'oracleawarebackup\'' ) do |parsopt|
        options[:snapshotidentifier] = parsopt
      end
      options[:minsnapshotgap] = 3300
      opts.on( '-g', '--minsnapshotgap SECONDS', 'Abort backup process if snapshot found more recently than SECONDS' ) do |parsopt|
        options[:minsnapshotgap] = parsopt.to_i
      end
      options[:minsnapshotage] = 604800
      opts.on( '-a', '--minsnapshotage SECONDS', 'During snapshot cleanup/rotate, do not delete snapshots created more recently than SECONDS; defaults to 7 days' ) do |parsopt|
        options[:minsnapshotage] = parsopt.to_i
      end
      options[:minsnapshotretain] = nil
      opts.on( '-r', '--minsnapshotretain NUMBER', 'During snapshot cleanup/rotate, do not delete snapshots if there are less than a total of NUMBER' ) do |parsopt|
        options[:minsnapshotretain] = parsopt.to_i
      end
      options[:dbhostname] = nil
      opts.on( '-d', '--dbhostname FQDN', 'Connect to Oracle DB server at FQDN' ) do |parsopt|
        options[:dbhostname] = parsopt
      end
      options[:dbusername] = nil
      opts.on( '-e', '--dbusername USERNAME', 'Connect to Oracle DB server as USERNAME' ) do |parsopt|
        options[:dbusername] = parsopt
      end
      options[:dbuserkey] = nil
      opts.on( '-f', '--dbuserkey FILE', 'SSH keyfile for connecting to Oracle DB server' ) do |parsopt|
        options[:dbuserkey] = parsopt
      end
      opts.on( '-c', '--console', 'Send logging data to console in addition to syslog' ) do
        $outputtoconsole = true
      end
      opts.on( '-h', '-?', '--help', 'Display this screen' ) do
        puts opts
        exit
      end
    end
  optparse.parse!
  # Check for missing options
  options.each do |key, value|
    if value == nil
      puts optparse.help()
      exit
    end
  end
  # All options accounted for; proceed with the backup
  log('Beginning backup process')
  log("Connecting to #{options[:dbhostname]} and getting the ORACLE_BASE environment variable")
  oraclebase = getoraclebase(options[:dbhostname],options[:dbusername],options[:dbuserkey])
  log("ORACLE_BASE successfully retrieved as #{oraclebase}")
  log("Connecting to #{options[:dbhostname]} and checking for running autostarted databases")
  databases = runningdbs(options[:dbhostname],options[:dbusername],options[:dbuserkey])
  unless recentsnapshotexists?(options[:sanhostname],options[:sanusername],options[:sanuserkey],options[:sanvolume],options[:snapshotidentifier],options[:minsnapshotgap])
    log("No recent (< #{(options[:minsnapshotgap].to_f / 60.0).round(2).to_s} minutes old) Nimble snapshots found; proceeding with backup")
    # Set t as the current time, to use in log verification later 
    t = Time.now
    sleep 1
    log("Connecting to #{options[:dbhostname]} and toggling backup mode on")
    backupmodeenableresult = backupmodetoggle(options[:dbhostname],options[:dbusername],options[:dbuserkey],'enable',databases)
    # Verify the autostarted databases have logged the alter
    unless backupmodelogged?(options[:dbhostname],options[:dbusername],options[:dbuserkey],t,oraclebase,databases)
      log('Warning - one or more databases did not log the successful completion of the database alter')
    else
      log('Databases appear to have successfully logged the start of backup mode')
    end
    takesnapshot(options[:sanhostname],options[:sanusername],options[:sanuserkey],options[:sanvolume],options[:snapshotidentifier])
    unless recentsnapshotexists?(options[:sanhostname],options[:sanusername],options[:sanuserkey],options[:sanvolume],options[:snapshotidentifier],options[:minsnapshotgap])
      log('Warning - Nimble snapshot requested, but subsequent check did not find it. Proceeding to cleanup')
    end
  else
    log('Recent Nimble snapshot appears to already exist. Skipping to cleanup')
  end
  backupmodetoggle(options[:dbhostname],options[:dbusername],options[:dbuserkey],'disable',databases)
  log("Beginning cleanup; will remove snapshots created before #{(Time.now - options[:minsnapshotage]).to_s} until there are only #{options[:minsnapshotretain]} snapshots remaining")
  removeoldestbackup(options[:sanhostname],options[:sanusername],options[:sanuserkey],options[:sanvolume],options[:snapshotidentifier],options[:minsnapshotretain],options[:minsnapshotage])
  log('Cleanup completed successfully. Backup process has completed.')
end
